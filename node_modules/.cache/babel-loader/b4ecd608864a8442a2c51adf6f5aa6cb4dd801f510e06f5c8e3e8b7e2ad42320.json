{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Converter = exports.Convert = void 0;\nconst requester_1 = require(\"./parts/requester\");\nconst config_1 = require(\"./parts/config\");\nvar chainer_1 = require(\"./parts/chainer\");\nObject.defineProperty(exports, \"Convert\", {\n  enumerable: true,\n  get: function () {\n    return chainer_1.Chainer;\n  }\n});\nconst await_to_js_1 = __importDefault(require(\"await-to-js\"));\nconst axios_1 = __importDefault(require(\"axios\"));\n/**\n * Regular converter class definition.\n *\n * @export\n * @class Converter\n */\nclass Converter {\n  /**\n   * Creates an instance of Converter.\n   * @param {(...ProviderReference[] | undefined[] | string[])} config\n   * @memberof Converter\n   */\n  constructor(...config) {\n    /**\n     * Method to set the proxy configuration.\n     * @param proxyConfiguration  The proxy configuration.\n     */\n    this.setProxyConfiguration = proxyConfiguration => {\n      this.config.setClient(axios_1.default.create({\n        proxy: proxyConfiguration\n      }));\n    };\n    /**\n     * Conversion function (non chainable).\n     *\n     * @example\n     * const converter = new Converter()\n     * const converted = await converter.convert(15,\"USD\",\"EUR\")\n     * console.log(converted);\n     *\n     * @param {number} amount - amount to be converted\n     * @param {string} from - base currency\n     * @param {string} to - conversion currency\n     * @param {any} rates - conversion rates, if they were pre-fetched\n     * @returns {Promise<number>} - converted amount\n     */\n    this.convert = (amount, from, to, rates = undefined) => __awaiter(this, void 0, void 0, function* () {\n      // Returining conversion from provided rates\n      if (typeof rates !== \"undefined\") {\n        return this.convertRate(amount, to, rates);\n      }\n      //Fetching conversion rates from the active provider\n      const [err, data] = yield (0, await_to_js_1.default)(this.getRates(from, to, false));\n      if (err) {\n        throw err;\n      }\n      if (!data || Object.keys(data).length == 0) {\n        throw new Error(\"No data returned for rate fetch.\");\n      }\n      // Normalizing resulting rates data\n      return this.convertRate(amount, to, data);\n    });\n    /**\n     * Performs safe multiplication to get the result amount.\n     * @param {number} amount - amount to be converted\n     * @param {string} to - conversion currency\n     * @param {any} rates - conversion rates, if they were pre-fetched\n     * @returns\n     */\n    this.convertRate = (amount, to, rates = undefined) => {\n      if (!rates[to]) {\n        throw new Error(`No '${to}' present in rates: ${rates}`);\n      }\n      return amount * rates[to];\n    };\n    /**\n     * Rate fetch function\n     * @param {string} from - base currency\n     * @param {string} to - conversion currency\n     * @param {boolean} multiple - determines conversion mode\n     * @returns\n     */\n    this.getRates = (from, to, multiple = false) => __awaiter(this, void 0, void 0, function* () {\n      // Getting the current active provider\n      const provider = this.config.activeProvider();\n      // Getting the client\n      const client = this.config.getClient();\n      // Fetching conversion rates from the active provider.\n      const [err, data] = yield (0, await_to_js_1.default)((0, requester_1.fetchRates)(client, provider, {\n        FROM: from,\n        TO: to,\n        multiple: multiple\n      }));\n      // error handling:\n      // if the error is not in the registered list of errors (is undefined), then throw.\n      // if the error is in the list, but there are no backup providers, then throw.\n      // if the error is in the list and there is a backup, log the error and continue.\n      if (!err) {\n        return provider.handler(data);\n      }\n      // unrecognized error\n      if (!err.handled) {\n        throw err.error;\n      }\n      // logging existing error\n      console.error(err.error);\n      if (this.config.providers.length <= 1) {\n        throw err.error;\n      }\n      // removing current provider from active list\n      this.config.remove(provider);\n      // Retrying...\n      return this.getRates(from, to, multiple);\n    });\n    this.config = new config_1.Config(...config);\n    // Forwarding config adder function (with the alternative handle)\n    this.add = this.config.add;\n    this.addProvider = this.config.add;\n    // Forwarding config multiple adder function (with the alternative handle)\n    this.addMultiple = this.config.addMultiple;\n    this.addMultipleProviders = this.config.addMultiple;\n    this.remove = this.config.remove;\n  }\n  /**\n   * Getters for active providers\n   *\n   * @readonly\n   * @type {Provider[]}\n   * @memberof Converter\n   */\n  get providers() {\n    return this.config.providers;\n  }\n  get active() {\n    return this.config.providers;\n  }\n}\nexports.Converter = Converter;","map":{"version":3,"names":["requester_1","require","config_1","chainer_1","Object","defineProperty","exports","enumerable","get","Chainer","await_to_js_1","__importDefault","axios_1","Converter","constructor","config","setProxyConfiguration","proxyConfiguration","setClient","default","create","proxy","convert","amount","from","to","rates","undefined","__awaiter","convertRate","err","data","getRates","keys","length","Error","multiple","provider","activeProvider","client","getClient","fetchRates","FROM","TO","handler","handled","error","console","providers","remove","Config","add","addProvider","addMultiple","addMultipleProviders","active"],"sources":["C:\\Users\\yurii\\OneDrive\\Pulpit\\site-anim\\node_modules\\easy-currencies\\src\\converter.ts"],"sourcesContent":["import { fetchRates } from \"./parts/requester\";\nimport { Provider, ProviderReference } from \"./parts/providers\";\nimport { Config, ProxyConfiguration } from \"./parts/config\";\nexport { Chainer as Convert } from \"./parts/chainer\";\nimport _to from \"await-to-js\";\nimport axios from \"axios\";\n\n/**\n * A simple map object for rates\n *\n * @export\n * @interface rateObject\n */\nexport interface rateObject {\n  [currencyName: string]: number;\n}\n\n/**\n * Regular converter class definition.\n *\n * @export\n * @class Converter\n */\nexport class Converter {\n  /**\n   * Converter's main config object.\n   *\n   * @type {Config}\n   * @memberof Converter\n   */\n  config: Config;\n\n  /**\n   * Creates an instance of Converter.\n   * @param {(...ProviderReference[] | undefined[] | string[])} config\n   * @memberof Converter\n   */\n  constructor(...config: ProviderReference[] | undefined[] | string[]) {\n    this.config = new Config(...config);\n\n    // Forwarding config adder function (with the alternative handle)\n    this.add = this.config.add;\n    this.addProvider = this.config.add;\n\n    // Forwarding config multiple adder function (with the alternative handle)\n    this.addMultiple = this.config.addMultiple;\n    this.addMultipleProviders = this.config.addMultiple;\n\n    this.remove = this.config.remove;\n  }\n\n  /**\n   * Getters for active providers\n   *\n   * @readonly\n   * @type {Provider[]}\n   * @memberof Converter\n   */\n  get providers(): Provider[] {\n    return this.config.providers;\n  }\n  get active(): Provider[] {\n    return this.config.providers;\n  }\n\n  /*\n   Proxy function definitions\n   */\n  add: Config[\"add\"];\n  addProvider: Config[\"add\"];\n  addMultiple: Config[\"addMultiple\"];\n  addMultipleProviders: Config[\"addMultiple\"];\n  remove: Config[\"remove\"];\n\n  /**\n   * Method to set the proxy configuration.\n   * @param proxyConfiguration  The proxy configuration.\n   */\n  setProxyConfiguration = (proxyConfiguration: ProxyConfiguration) => {\n    this.config.setClient(axios.create({ proxy: proxyConfiguration }));\n  };\n\n  /**\n   * Conversion function (non chainable).\n   *\n   * @example\n   * const converter = new Converter()\n   * const converted = await converter.convert(15,\"USD\",\"EUR\")\n   * console.log(converted);\n   *\n   * @param {number} amount - amount to be converted\n   * @param {string} from - base currency\n   * @param {string} to - conversion currency\n   * @param {any} rates - conversion rates, if they were pre-fetched\n   * @returns {Promise<number>} - converted amount\n   */\n  convert = async (\n    amount: number,\n    from: string,\n    to: string,\n    rates: any = undefined\n  ): Promise<number> => {\n    // Returining conversion from provided rates\n    if (typeof rates !== \"undefined\") {\n      return this.convertRate(amount, to, rates);\n    }\n\n    //Fetching conversion rates from the active provider\n    const [err, data] = await _to(this.getRates(from, to, false));\n\n    if (err) {\n      throw err;\n    }\n\n    if (!data || Object.keys(data).length == 0) {\n      throw new Error(\"No data returned for rate fetch.\");\n    }\n\n    // Normalizing resulting rates data\n    return this.convertRate(amount, to, data);\n  };\n\n  /**\n   * Performs safe multiplication to get the result amount.\n   * @param {number} amount - amount to be converted\n   * @param {string} to - conversion currency\n   * @param {any} rates - conversion rates, if they were pre-fetched\n   * @returns\n   */\n  convertRate = (\n    amount: number,\n    to: string,\n    rates: any = undefined\n  ): number => {\n    if (!rates[to]) {\n      throw new Error(`No '${to}' present in rates: ${rates}`);\n    }\n\n    return amount * rates[to];\n  };\n\n  /**\n   * Rate fetch function\n   * @param {string} from - base currency\n   * @param {string} to - conversion currency\n   * @param {boolean} multiple - determines conversion mode\n   * @returns\n   */\n  getRates = async (\n    from: string,\n    to: string,\n    multiple: boolean = false\n  ): Promise<rateObject> => {\n    // Getting the current active provider\n    const provider = this.config.activeProvider();\n\n    // Getting the client\n    const client = this.config.getClient();\n\n    // Fetching conversion rates from the active provider.\n    const [err, data] = await (<any>_to(\n      fetchRates(client, provider, {\n        FROM: from,\n        TO: to,\n        multiple: multiple\n      })\n    ));\n\n    // error handling:\n    // if the error is not in the registered list of errors (is undefined), then throw.\n    // if the error is in the list, but there are no backup providers, then throw.\n    // if the error is in the list and there is a backup, log the error and continue.\n    if (!err) {\n      return provider.handler(data);\n    }\n\n    // unrecognized error\n    if (!err.handled) {\n      throw err.error;\n    }\n\n    // logging existing error\n    console.error(err.error);\n\n    if (this.config.providers.length <= 1) {\n      throw err.error;\n    }\n\n    // removing current provider from active list\n    this.config.remove(provider);\n\n    // Retrying...\n    return this.getRates(from, to, multiple);\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}