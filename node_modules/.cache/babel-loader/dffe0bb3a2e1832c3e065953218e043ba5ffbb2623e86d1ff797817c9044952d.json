{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.providers = exports.resolveProvider = void 0;\n/**\n * A function that constructs provider based on raw input data.\n *\n * @export\n * @param {ProviderReference} provider object containing provider name and api key\n * @returns {Provider} constructed provider\n */\nfunction resolveProvider(provider) {\n  const existentProvider = exports.providers[provider.name];\n  if (!existentProvider) {\n    throw \"No provider with this name. Please use a provider from the supported providers list.\";\n  }\n  // attaching key\n  existentProvider.key = provider.key;\n  return existentProvider;\n}\nexports.resolveProvider = resolveProvider;\n/**\n * Provider map initialization\n */\nexports.providers = {\n  ExchangeRateAPI: {\n    endpoint: {\n      base: \"https://api.exchangerate-api.com/v4/latest/\",\n      single: \"%FROM%\",\n      multiple: \"%FROM%\"\n    },\n    key: undefined,\n    handler: function (data) {\n      return data.rates;\n    },\n    errors: {\n      400: \"Malformed query.\",\n      404: \"Currency not found\"\n    },\n    errorHandler: function (data) {\n      return data.status;\n    }\n  },\n  ExchangeRatesAPIIO: {\n    endpoint: {\n      base: \"http://api.exchangeratesapi.io/latest?access_key=%KEY%\",\n      single: \"&base=%FROM%&symbols=%TO%\",\n      multiple: \"&base=%FROM%\"\n    },\n    errors: {\n      105: \"A paid plan is required in order to use other base currencies!\",\n      101: \"Invalid API key!\",\n      201: \"Invalid base currency.\"\n    },\n    key: undefined,\n    handler: function (data) {\n      return data.rates;\n    },\n    errorHandler: function (data) {\n      return data.status;\n    }\n  },\n  CurrencyLayer: {\n    endpoint: {\n      base: \"http://apilayer.net/api/live?access_key=%KEY%\",\n      single: \"&source=%FROM%\",\n      multiple: \"&source=%FROM%&currencies=%TO%\"\n    },\n    key: undefined,\n    handler: function (data) {\n      const map = {};\n      Object.keys(data.quotes).map(key => {\n        map[key.slice(3)] = data.quotes[key];\n      });\n      return map;\n    },\n    errors: {\n      105: \"A paid plan is required in order to use CurrencyLayer (base currency use not allowed)\",\n      101: \"Invalid API key!\",\n      201: \"Invalid base currency.\",\n      106: \"No results.\"\n    },\n    errorHandler: function (data) {\n      return data.error ? data.error.code : null;\n    }\n  },\n  OpenExchangeRates: {\n    endpoint: {\n      base: \"https://openexchangerates.org/api/latest.json?app_id=%KEY%\",\n      single: \"&base=%FROM%\",\n      multiple: \"&base=%FROM%\"\n    },\n    key: undefined,\n    handler: function (data) {\n      return data.rates;\n    },\n    errors: {\n      401: \"Invalid API key!\"\n    },\n    errorHandler: function (data) {\n      return data.status;\n    }\n  },\n  AlphaVantage: {\n    endpoint: {\n      base: \"https://www.alphavantage.co/query?function=CURRENCY_EXCHANGE_RATE&apikey=%KEY%\",\n      single: \"&from_currency=%FROM%&to_currency=%TO%\",\n      multiple: \"\"\n    },\n    key: undefined,\n    handler: function (data) {\n      const map = {};\n      const o = data[Object.keys(data)[0]];\n      map[o[\"3. To_Currency Code\"]] = o[\"5. Exchange Rate\"];\n      return map;\n    },\n    errors: {\n      503: \"Invalid API key or Malformed query.\"\n    },\n    errorHandler: function (data) {\n      return data[\"Error Message\"] ? 503 : false;\n    }\n  },\n  Fixer: {\n    endpoint: {\n      base: \"http://data.fixer.io/api/latest?access_key=%KEY%\",\n      single: \"&base=%FROM%&symbols=%TO%\",\n      multiple: \"&base=%FROM%\"\n    },\n    key: undefined,\n    handler: function (data) {\n      return data.rates;\n    },\n    errors: {\n      105: \"A paid plan is required in order to use Fixer.io (base currency use not allowed)\",\n      101: \"Invalid API key!\",\n      201: \"Invalid base currency.\"\n    },\n    errorHandler: function (data) {\n      return data.error ? data.error.code : null;\n    }\n  }\n};","map":{"version":3,"names":["resolveProvider","provider","existentProvider","exports","providers","name","key","ExchangeRateAPI","endpoint","base","single","multiple","undefined","handler","data","rates","errors","errorHandler","status","ExchangeRatesAPIIO","CurrencyLayer","map","Object","keys","quotes","slice","error","code","OpenExchangeRates","AlphaVantage","o","Fixer"],"sources":["C:\\Users\\yurii\\OneDrive\\Pulpit\\site-anim\\node_modules\\easy-currencies\\src\\parts\\providers.ts"],"sourcesContent":["/**\n * A map for provider information\n *\n * @interface Providers\n */\nexport interface Providers {\n  [name: string]: Provider;\n}\n\n/**\n * Provider error entry\n *\n * @export\n * @interface ProviderErrors\n */\nexport interface ProviderErrors {\n  [code: string]: string;\n}\n\n/**\n * Object that describes a user-defined provider.\n *\n * @export\n * @interface UserDefinedProvider\n */\nexport interface UserDefinedProvider {\n  name: string;\n  provider: Provider;\n}\n\n/**\n * Single provider interface.\n * Used to store pre-constructed query templates for various currency rate providers.\n * @export\n * @interface Provider\n */\nexport interface Provider {\n  /**\n   * An API key / Profile ID / Access key for a provider.\n   *\n   * @type {*}\n   * @memberof Provider\n   */\n  key: any;\n  /**\n   * Endpoint configuration object for a provider:\n   * The base template is the root of the access URL, with a place for access key in the form of %KEY% (if needed)\n   * The single template is used for single currency conversions, requires a %FROM% and a %TO% to be present.\n   * The multiple template is currently unused.\n   * @type {{ base: string; single: string; multiple: string }}\n   * @memberof Provider\n   */\n  endpoint: { base: string; single: string; multiple: string };\n  /**\n   * A function that returns a map of currencies from the data object returned by axios (response.data)\n   *\n   * @example\n   *  function(data) { //must return {currency1:rate1,curency2:rate2} in reference to the base currency.\n   *    return data.rates;\n   *  }\n   *\n   * @type {Function}\n   * @memberof Provider\n   */\n  handler: Function;\n  /**\n   * A map of possible errors and their respective messages\n   *\n   * @type {*}\n   * @memberof Provider\n   */\n  errors: ProviderErrors;\n  /**\n   * A unique method to resolve errors, if any.\n   * Some APIs return their errors via success responses, others via HTTP failures.\n   * These two modes are mutually exclusive; The data passed to the errorHandler is:\n   * the response.data object, in the case of 'success' failures\n   * the response object, in the case of Axios errors (HTTP failures)\n   *\n   * @type {Function}\n   * @memberof Provider\n   */\n  errorHandler: Function;\n}\n\n/**\n * An interface for an object that is used to configure providers\n *\n * @export\n * @interface ProviderReference\n */\nexport interface ProviderReference {\n  name: string;\n  key: any;\n}\n\n/**\n * A function that constructs provider based on raw input data.\n *\n * @export\n * @param {ProviderReference} provider object containing provider name and api key\n * @returns {Provider} constructed provider\n */\nexport function resolveProvider(provider: ProviderReference): Provider {\n  const existentProvider = providers[provider.name];\n  if (!existentProvider) {\n    throw \"No provider with this name. Please use a provider from the supported providers list.\";\n  }\n\n  // attaching key\n  existentProvider.key = provider.key;\n  return existentProvider;\n}\n\n/**\n * Provider map initialization\n */\nexport const providers: Providers = {\n  ExchangeRateAPI: {\n    endpoint: {\n      base: \"https://api.exchangerate-api.com/v4/latest/\",\n      single: \"%FROM%\",\n      multiple: \"%FROM%\"\n    },\n    key: undefined,\n    handler: function (data: any) {\n      return data.rates;\n    },\n    errors: { 400: \"Malformed query.\", 404: \"Currency not found\" },\n    errorHandler: function (data: any) {\n      return data.status;\n    }\n  },\n  ExchangeRatesAPIIO: {\n    endpoint: {\n      base: \"http://api.exchangeratesapi.io/latest?access_key=%KEY%\",\n      single: \"&base=%FROM%&symbols=%TO%\",\n      multiple: \"&base=%FROM%\"\n    },\n    errors: {\n      105: \"A paid plan is required in order to use other base currencies!\",\n      101: \"Invalid API key!\",\n      201: \"Invalid base currency.\"\n    },\n    key: undefined,\n    handler: function (data: any) {\n      return data.rates;\n    },\n    errorHandler: function (data: any) {\n      return data.status;\n    }\n  },\n  CurrencyLayer: {\n    endpoint: {\n      base: \"http://apilayer.net/api/live?access_key=%KEY%\",\n      single: \"&source=%FROM%\",\n      multiple: \"&source=%FROM%&currencies=%TO%\"\n    },\n    key: undefined,\n    handler: function (data: any) {\n      const map = {} as any;\n      Object.keys(data.quotes).map((key) => {\n        map[key.slice(3)] = data.quotes[key];\n      });\n      return map;\n    },\n    errors: {\n      105: \"A paid plan is required in order to use CurrencyLayer (base currency use not allowed)\",\n      101: \"Invalid API key!\",\n      201: \"Invalid base currency.\",\n      106: \"No results.\"\n    },\n    errorHandler: function (data: any) {\n      return data.error ? data.error.code : null;\n    }\n  },\n  OpenExchangeRates: {\n    endpoint: {\n      base: \"https://openexchangerates.org/api/latest.json?app_id=%KEY%\",\n      single: \"&base=%FROM%\",\n      multiple: \"&base=%FROM%\"\n    },\n    key: undefined,\n    handler: function (data: any) {\n      return data.rates;\n    },\n    errors: {\n      401: \"Invalid API key!\"\n    },\n    errorHandler: function (data: any) {\n      return data.status;\n    }\n  },\n  AlphaVantage: {\n    endpoint: {\n      base: \"https://www.alphavantage.co/query?function=CURRENCY_EXCHANGE_RATE&apikey=%KEY%\",\n      single: \"&from_currency=%FROM%&to_currency=%TO%\",\n      multiple: \"\"\n    },\n    key: undefined,\n    handler: function (data: any) {\n      const map = {} as any;\n      const o = data[Object.keys(data)[0]];\n      map[o[\"3. To_Currency Code\"]] = o[\"5. Exchange Rate\"];\n      return map;\n    },\n    errors: {\n      503: \"Invalid API key or Malformed query.\"\n    },\n    errorHandler: function (data: any) {\n      return data[\"Error Message\"] ? 503 : false;\n    }\n  },\n  Fixer: {\n    endpoint: {\n      base: \"http://data.fixer.io/api/latest?access_key=%KEY%\",\n      single: \"&base=%FROM%&symbols=%TO%\",\n      multiple: \"&base=%FROM%\"\n    },\n    key: undefined,\n    handler: function (data: any) {\n      return data.rates;\n    },\n    errors: {\n      105: \"A paid plan is required in order to use Fixer.io (base currency use not allowed)\",\n      101: \"Invalid API key!\",\n      201: \"Invalid base currency.\"\n    },\n    errorHandler: function (data: any) {\n      return data.error ? data.error.code : null;\n    }\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}