{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fetchRates = void 0;\nconst await_to_js_1 = __importDefault(require(\"await-to-js\"));\n/**\n * The fetchRates function, used for fetching currency conversion rates.\n *\n * @export\n * @param {AxiosInstance} client - client to be used for the request\n * @param {Provider} provider - provider from which the quotes will be fetched\n * @param {Query} query - the query\n * @returns {Promise<any>} - a result promise\n */\nfunction fetchRates(client, provider, query) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const [err, result] = yield (0, await_to_js_1.default)(client.get(formatUrl(provider, query)));\n    // resolving error\n    const error = provider.errorHandler(err ? err.response : result.data);\n    // returning either the meaning of the error (if registered in provider's definition), or the error itself.\n    if (error) {\n      throw provider.errors[error] ? {\n        handled: true,\n        error: provider.errors[error]\n      } : {\n        handled: false,\n        error\n      };\n    }\n    return result.data;\n  });\n}\nexports.fetchRates = fetchRates;\n/**\n * URL formatting function\n *\n * @param {Provider} provider - provider against which the request will be executed\n * @param {Query} query - the query\n * @returns {string} - formatted GET url string.\n */\nfunction formatUrl(provider, query) {\n  // if (query.multiple) {\n  //   return (provider.endpoint.base + provider.endpoint.multiple)\n  //     .replace(\"%FROM%\", query.FROM)\n  //     .replace(\"%KEY%\", provider.key || \"\");\n  // }\n  // inserting base currency, final currency, and key (if needed)\n  return (provider.endpoint.base + provider.endpoint.single).replace(\"%FROM%\", query.FROM).replace(\"%TO%\", query.TO).replace(\"%KEY%\", provider.key || \"\");\n}","map":{"version":3,"names":["await_to_js_1","__importDefault","require","fetchRates","client","provider","query","err","result","default","get","formatUrl","error","errorHandler","response","data","errors","handled","exports","endpoint","base","single","replace","FROM","TO","key"],"sources":["C:\\Users\\yurii\\OneDrive\\Pulpit\\site-anim\\node_modules\\easy-currencies\\src\\parts\\requester.ts"],"sourcesContent":["import { AxiosError, AxiosInstance } from \"axios\";\nimport { Provider } from \"./providers\";\nimport to from \"await-to-js\";\n\n/**\n * Query interface, used to interact with the requester.\n *\n * @export\n * @interface Query\n */\nexport interface Query {\n  FROM: string;\n  TO: string;\n  multiple: boolean;\n}\n\n/**\n * The fetchRates function, used for fetching currency conversion rates.\n *\n * @export\n * @param {AxiosInstance} client - client to be used for the request\n * @param {Provider} provider - provider from which the quotes will be fetched\n * @param {Query} query - the query\n * @returns {Promise<any>} - a result promise\n */\nexport async function fetchRates(\n  client: AxiosInstance,\n  provider: Provider,\n  query: Query\n): Promise<any> {\n  const [err, result] = (await to(client.get(formatUrl(provider, query)))) as [\n    AxiosError,\n    any\n  ];\n\n  // resolving error\n  const error = provider.errorHandler(err ? err.response : result.data);\n\n  // returning either the meaning of the error (if registered in provider's definition), or the error itself.\n  if (error) {\n    throw provider.errors[error]\n      ? { handled: true, error: provider.errors[error] }\n      : { handled: false, error };\n  }\n\n  return result.data;\n}\n\n/**\n * URL formatting function\n *\n * @param {Provider} provider - provider against which the request will be executed\n * @param {Query} query - the query\n * @returns {string} - formatted GET url string.\n */\nfunction formatUrl(provider: Provider, query: Query): string {\n  // if (query.multiple) {\n  //   return (provider.endpoint.base + provider.endpoint.multiple)\n  //     .replace(\"%FROM%\", query.FROM)\n  //     .replace(\"%KEY%\", provider.key || \"\");\n  // }\n\n  // inserting base currency, final currency, and key (if needed)\n  return (provider.endpoint.base + provider.endpoint.single)\n    .replace(\"%FROM%\", query.FROM)\n    .replace(\"%TO%\", query.TO)\n    .replace(\"%KEY%\", provider.key || \"\");\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,MAAAA,aAAA,GAAAC,eAAA,CAAAC,OAAA;AAcA;;;;;;;;;AASA,SAAsBC,UAAUA,CAC9BC,MAAqB,EACrBC,QAAkB,EAClBC,KAAY;;IAEZ,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAI,MAAM,IAAAR,aAAA,CAAAS,OAAE,EAACL,MAAM,CAACM,GAAG,CAACC,SAAS,CAACN,QAAQ,EAAEC,KAAK,CAAC,CAAC,CAGrE;IAED;IACA,MAAMM,KAAK,GAAGP,QAAQ,CAACQ,YAAY,CAACN,GAAG,GAAGA,GAAG,CAACO,QAAQ,GAAGN,MAAM,CAACO,IAAI,CAAC;IAErE;IACA,IAAIH,KAAK,EAAE;MACT,MAAMP,QAAQ,CAACW,MAAM,CAACJ,KAAK,CAAC,GACxB;QAAEK,OAAO,EAAE,IAAI;QAAEL,KAAK,EAAEP,QAAQ,CAACW,MAAM,CAACJ,KAAK;MAAC,CAAE,GAChD;QAAEK,OAAO,EAAE,KAAK;QAAEL;MAAK,CAAE;;IAG/B,OAAOJ,MAAM,CAACO,IAAI;EACpB,CAAC;;AArBDG,OAAA,CAAAf,UAAA,GAAAA,UAAA;AAuBA;;;;;;;AAOA,SAASQ,SAASA,CAACN,QAAkB,EAAEC,KAAY;EACjD;EACA;EACA;EACA;EACA;EAEA;EACA,OAAO,CAACD,QAAQ,CAACc,QAAQ,CAACC,IAAI,GAAGf,QAAQ,CAACc,QAAQ,CAACE,MAAM,EACtDC,OAAO,CAAC,QAAQ,EAAEhB,KAAK,CAACiB,IAAI,CAAC,CAC7BD,OAAO,CAAC,MAAM,EAAEhB,KAAK,CAACkB,EAAE,CAAC,CACzBF,OAAO,CAAC,OAAO,EAAEjB,QAAQ,CAACoB,GAAG,IAAI,EAAE,CAAC;AACzC"},"metadata":{},"sourceType":"script","externalDependencies":[]}