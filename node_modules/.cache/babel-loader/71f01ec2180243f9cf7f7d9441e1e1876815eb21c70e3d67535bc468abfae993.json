{"ast":null,"code":"const cheerio = require(\"cheerio\");\nconst request = require(\"request\");\nclass CurrencyConverter {\n  currencies = {\n    \"AFN\": \"Afghan Afghani\",\n    \"ALL\": \"Albanian Lek\",\n    \"DZD\": \"Algerian Dinar\",\n    \"AOA\": \"Angolan Kwanza\",\n    \"ARS\": \"Argentine Peso\",\n    \"AMD\": \"Armenian Dram\",\n    \"AWG\": \"Aruban Florin\",\n    \"AUD\": \"Australian Dollar\",\n    \"AZN\": \"Azerbaijani M anat\",\n    \"BSD\": \"Bahamian Dollar\",\n    \"BHD\": \"Bahraini Dinar\",\n    \"BBD\": \"Bajan Dollar\",\n    \"BDT\": \"Bangladeshi Taka\",\n    \"BYN\": \"Belarusian Ruble\",\n    \"BZD\": \"Belize Dollar\",\n    \"BMD\": \"Bermudan Dollar\",\n    \"BTN\": \"Bhutan currency\",\n    \"BOB\": \"Bolivian Boliviano\",\n    \"BAM\": \"Bosnia-Herzegovina Convertible Mark\",\n    \"BWP\": \"Botswanan Pula\",\n    \"BRL\": \"Brazilian Real\",\n    \"BND\": \"Brunei Dollar\",\n    \"BGN\": \"Bulgarian Lev\",\n    \"BIF\": \"Burundian Fra nc\",\n    \"XPF\": \"CFP Franc\",\n    \"KHR\": \"Cambodian riel\",\n    \"CAD\": \"Canadian Dollar\",\n    \"CVE\": \"Cape Verdean Escudo\",\n    \"KYD\": \"Cayman Islands Dollar\",\n    \"FCFA\": \"Central African CFA Franc\",\n    \"CLP\": \"Chilean Peso\",\n    \"CLF\": \"Chilean Unit of Account (UF)\",\n    \"CNY\": \"Chinese Yuan\",\n    \"CNY\": \"Chinese Yuan (offshore)\",\n    \"COP\": \"Colombian Peso\",\n    \"KMF\": \"Comorian Franc\",\n    \"CDF\": \"Congolese Franc\",\n    \"CRC\": \"Costa Rican Colón\",\n    \"HRK\": \"Croatian Kuna\",\n    \"CUC\": \"Cuban Peso\",\n    \"CZK\": \"Czech Koruna\",\n    \"DKK\": \"Danish Krone\",\n    \"DJF\": \"Djiboutian Franc\",\n    \"DOP\": \"Dominican Pe so\",\n    \"XCD\": \"East Caribbean Dollar\",\n    \"EGP\": \"Egyptian Pound\",\n    \"ETB\": \"Ethiopian Birr\",\n    \"FJD\": \"Fijian Dollar\",\n    \"GMD\": \"Gambian dalasi\",\n    \"GEL\": \"Georgian Lari\",\n    \"GHS\": \"Ghanaian Cedi\",\n    \"GTQ\": \"Guatemalan Quetzal\",\n    \"GNF\": \"Guinean Franc\",\n    \"GYD\": \"Guyanaese Dollar\",\n    \"HTG\": \"Haitian Gourde\",\n    \"HNL\": \"Honduran Lempira\",\n    \"HKD\": \"Hong Kong Dollar\",\n    \"HUF\": \"Hungarian Forint\",\n    \"ISK\": \"Icelandic Króna\",\n    \"INR\": \"Indian Rupee\",\n    \"IDR\": \"Indonesian Rupiah\",\n    \"IRR\": \"Iranian Rial\",\n    \"IQD\": \"Iraqi Dinar\",\n    \"ILS\": \"Israeli New Shekel\",\n    \"JMD\": \"Jamaican Dollar\",\n    \"JPY\": \"Japanese Yen\",\n    \"JOD\": \"Jordanian Dinar\",\n    \"KZT\": \"Kazakhstani Tenge\",\n    \"KES\": \"Kenyan Shilling\",\n    \"KWD\": \"Kuwaiti Dinar\",\n    \"KGS\": \"Kyrgystani Som\",\n    \"LAK\": \"Laotian Kip\",\n    \"LBP\": \"Lebanese pound\",\n    \"LSL\": \"Lesotho Loti\",\n    \"LRD\": \"Liberian Dollar\",\n    \"LYD\": \"Libyan Dinar\",\n    \"MOP\": \"Macanese Pataca\",\n    \"MKD\": \"Macedonian Denar\",\n    \"MGA\": \"Malagasy Ariary\",\n    \"MWK\": \"Malawian Kwacha\",\n    \"MYR\": \"Malaysian Ringgit\",\n    \"MVR\": \"Maldivian Rufiyaa\",\n    \"MRO\": \"Mauritanian Ouguiya\",\n    \"MUR\": \"Mauritian Rupee\",\n    \"MXN\": \"Mexican Peso\",\n    \"MDL\": \"Moldovan Leu\",\n    \"MAD\": \"Moroccan Dirham\",\n    \"MZN\": \"Mozambican metical\",\n    \"MMK\": \"Myanmar Kyat\",\n    \"NAD\": \"Namibian dol lar\",\n    \"NPR\": \"Nepalese Rupee\",\n    \"ANG\": \"Netherlands Antillean Guilder\",\n    \"NZD\": \"New Zealand Dollar\",\n    \"NIO\": \"Nicaraguan Córdoba\",\n    \"NGN\": \"Nigerian Naira\",\n    \"NOK\": \"Norwegian Krone\",\n    \"OMR\": \"Omani Rial\",\n    \"PKR\": \"Pakistani Rupee\",\n    \"PAB\": \"Panamanian Balboa\",\n    \"PGK\": \"Papua New Guinean Kina\",\n    \"PYG\": \"Paraguayan Guarani\",\n    \"PHP\": \"Philippine peso\",\n    \"PLN\": \"Poland Złoty\",\n    \"GBP\": \"Pound sterling\",\n    \"QAR\": \"Qatari Rial\",\n    \"RON\": \"Romania n Leu\",\n    \"RUB\": \"Russian Ruble\",\n    \"RWF\": \"Rwandan franc\",\n    \"SVC\": \"Salvadoran Colón\",\n    \"SAR\": \"Saudi Riyal\",\n    \"RSD\": \"Serbian Dinar\",\n    \"SCR\": \"Seychellois Rupee\",\n    \"SLL\": \"Sierra Leonean Leone\",\n    \"SGD\": \"Singapore Dollar\",\n    \"SBD\": \"Solomon Islands Dollar\",\n    \"SOS\": \"Somali Shilling\",\n    \"ZAR\": \"South African Rand\",\n    \"KRW\": \"South Korean won\",\n    \"VES\": \"Sovereign Bolivar\",\n    \"LKR\": \"Sri Lankan Rupee\",\n    \"SDG\": \"Sudanese pound\",\n    \"SRD\": \"Surinamese Dollar\",\n    \"SZL\": \"Swazi Lilangeni\",\n    \"SEK\": \"Swedish Krona\",\n    \"CF\": \"Swiss Franc\",\n    \"CHF\": \"Swiss Franc\",\n    \"TJS\": \"Tajikistani Somoni\",\n    \"TZS\": \"Tanzanian Shilling\",\n    \"THB\": \"Thai Baht\",\n    \"TOP\": \"Tongan Pa\\\"anga\",\n    \"TTD\": \"Trinidad and Tobago Dollar\",\n    \"TND\": \"Tunisian Dinar\",\n    \"TRY\": \"Turkish lira\",\n    \"TMT\": \"Turkmenistan manat\",\n    \"UGX\": \"Ugandan Shilling\",\n    \"UAH\": \"Ukrainian hryvnia\",\n    \"AED\": \"United Arab Emirates Dirham\",\n    \"USD\": \"United States Dollar\",\n    \"UYU\": \"Uruguayan Peso\",\n    \"UZS\": \"Uzbekistani Som\",\n    \"VND\": \"Vietnamese dong\",\n    \"XOF\": \"West African CFA franc\",\n    \"YER\": \"Yemeni Rial\",\n    \"ZMW\": \"Zambian Kwacha\",\n    \"XBT\": \"Bitcoin\",\n    \"ETH\": \"Ether\",\n    \"EUR\": \"Euro\",\n    \"LTC\": \"Litecoin\",\n    \"TWD\": \"NT$\",\n    \"PEN\": \"Peruvian Sol\"\n  };\n  currencyCode = [\"AFN\", \"ALL\", \"DZD\", \"AOA\", \"ARS\", \"AMD\", \"AWG\", \"AUD\", \"AZN\", \"BSD\", \"BHD\", \"BBD\", \"BDT\", \"BYN\", \"BZD\", \"BMD\", \"BTN\", \"XBT\", \"BOB\", \"BAM\", \"BWP\", \"BRL\", \"BND\", \"BGN\", \"BIF\", \"XPF\", \"KHR\", \"CAD\", \"CVE\", \"KYD\", \"FCFA\", \"CLP\", \"CLF\", \"CNY\", \"CNY\", \"COP\", \"CF\", \"CHF\", \"CDF\", \"CRC\", \"HRK\", \"CUC\", \"CZK\", \"DKK\", \"DJF\", \"DOP\", \"XCD\", \"EGP\", \"ETB\", \"FJD\", \"GMD\", \"GBP\", \"GEL\", \"GHS\", \"GTQ\", \"GNF\", \"GYD\", \"HTG\", \"HNL\", \"HKD\", \"HUF\", \"ISK\", \"INR\", \"IDR\", \"IRR\", \"IQD\", \"ILS\", \"JMD\", \"JPY\", \"JOD\", \"KMF\", \"KZT\", \"KES\", \"KWD\", \"KGS\", \"LAK\", \"LBP\", \"LSL\", \"LRD\", \"LYD\", \"MOP\", \"MKD\", \"MGA\", \"MWK\", \"MYR\", \"MVR\", \"MRO\", \"MUR\", \"MXN\", \"MDL\", \"MAD\", \"MZN\", \"MMK\", \"NAD\", \"NPR\", \"ANG\", \"NZD\", \"NIO\", \"NGN\", \"NOK\", \"OMR\", \"PKR\", \"PAB\", \"PGK\", \"PYG\", \"PHP\", \"PLN\", \"QAR\", \"RON\", \"RUB\", \"RWF\", \"SVC\", \"SAR\", \"RSD\", \"SCR\", \"SLL\", \"SGD\", \"SBD\", \"SOS\", \"ZAR\", \"KRW\", \"VES\", \"LKR\", \"SDG\", \"SRD\", \"SZL\", \"SEK\", \"CHF\", \"TJS\", \"TZS\", \"THB\", \"TOP\", \"TTD\", \"TND\", \"TRY\", \"TMT\", \"UGX\", \"UAH\", \"AED\", \"USD\", \"UYU\", \"UZS\", \"VND\", \"XOF\", \"YER\", \"ZMW\", \"ETH\", \"EUR\", \"LTC\", \"TWD\", \"PEN\"];\n  constructor(params) {\n    this.currencyFrom = \"\";\n    this.currencyTo = \"\";\n    this.currencyAmount = 1;\n    this.convertedValue = 0;\n    this.isDecimalComma = false;\n    this.isRatesCaching = false;\n    this.ratesCacheDuration = 0;\n    this.ratesCache = {};\n    if (params != undefined) {\n      if (params[\"from\"] !== undefined) this.from(params[\"from\"]);\n      if (params[\"to\"] !== undefined) this.to(params[\"to\"]);\n      if (params[\"amount\"] !== undefined) this.amount(params[\"amount\"]);\n      if (params[\"isDecimalComma\"] !== undefined) this.setDecimalComma(params[\"isDecimalComma\"]);\n    }\n  }\n  from(currencyFrom) {\n    if (typeof currencyFrom !== \"string\") throw new TypeError(\"currency code should be a string\");\n    if (!this.currencyCode.includes(currencyFrom.toUpperCase())) throw new Error(`${currencyFrom} is not a valid currency code`);\n    this.currencyFrom = currencyFrom.toUpperCase();\n    return this;\n  }\n  to(currencyTo) {\n    if (typeof currencyTo !== \"string\") throw new TypeError(\"currency code should be a string\");\n    if (!this.currencyCode.includes(currencyTo.toUpperCase())) throw new Error(`${currencyTo} is not a valid currency code`);\n    this.currencyTo = currencyTo;\n    return this;\n  }\n  amount(currencyAmount) {\n    if (typeof currencyAmount !== \"number\") throw new TypeError(\"amount should be a number\");\n    if (currencyAmount <= 0) throw new Error(\"amount should be a positive number\");\n    this.currencyAmount = currencyAmount;\n    return this;\n  }\n  setDecimalComma(isDecimalComma) {\n    if (typeof isDecimalComma !== \"boolean\") throw new TypeError(\"isDecimalComma should be a boolean\");\n    this.isDecimalComma = isDecimalComma;\n    return this;\n  }\n  replaceAll(text, queryString, replaceString) {\n    let text_ = \"\";\n    for (let i = 0; i < text.length; i++) {\n      if (text[i] === queryString) {\n        text_ += replaceString;\n      } else {\n        text_ += text[i];\n      }\n    }\n    return text_;\n  }\n  setupRatesCache(ratesCacheOptions) {\n    if (typeof ratesCacheOptions != \"object\") throw new TypeError(\"ratesCacheOptions should be an object\");\n    if (ratesCacheOptions.isRatesCaching === undefined) throw new Error(`ratesCacheOptions should have a property called isRatesCaching`);\n    if (typeof ratesCacheOptions.isRatesCaching != \"boolean\") throw new TypeError(\"ratesCacheOptions.isRatesCaching should be a boolean\");\n    if (typeof ratesCacheOptions.ratesCacheDuration != \"number\") throw new TypeError(\"ratesCacheOptions.ratesCacheDuration should be a number\");\n    if (ratesCacheOptions.ratesCacheDuration <= 0) throw new Error(\"ratesCacheOptions.ratesCacheDuration should be a positive number of seconds\");\n    this.isRatesCaching = ratesCacheOptions.isRatesCaching;\n    if (ratesCacheOptions.ratesCacheDuration === undefined) this.ratesCacheDuration = 3600; // Defaults to 3600 seconds (1 hour)\n    else this.ratesCacheDuration = ratesCacheOptions.ratesCacheDuration;\n    return this;\n  }\n  rates() {\n    if (this.currencyFrom === this.currencyTo) {\n      return new Promise((resolve, _) => {\n        resolve(1);\n      });\n    } else {\n      let currencyPair = this.currencyFrom.toUpperCase() + this.currencyTo.toUpperCase();\n      let now = new Date();\n      if (currencyPair in this.ratesCache && now < this.ratesCache[currencyPair].expiryDate) {\n        return new Promise((resolve, _) => {\n          resolve(this.ratesCache[currencyPair].rate);\n        });\n      } else {\n        return new Promise((resolve, reject) => {\n          request(`https://www.google.com/search?q=${this.currencyAmount}+${this.currencyFrom}+to+${this.currencyTo}+&hl=en`, function (error, response, body) {\n            if (error) {\n              return reject(error);\n            } else {\n              resolve(body);\n            }\n          });\n        }).then(body => {\n          return cheerio.load(body);\n        }).then($ => {\n          return $(\".iBp4i\").text().split(\" \")[0];\n        }).then(rates => {\n          if (this.isDecimalComma) {\n            if (rates.includes(\".\")) rates = this.replaceAll(rates, \".\", \"\");\n            if (rates.includes(\",\")) rates = this.replaceAll(rates, \",\", \".\");\n          } else {\n            if (rates.includes(\",\")) rates = this.replaceAll(rates, \",\", \"\");\n          }\n          rates = parseFloat(rates) / this.currencyAmount;\n          if (this.isRatesCaching) {\n            this.addRateToRatesCache(currencyPair, rates);\n          }\n          return rates;\n        });\n      }\n    }\n  }\n  convert(currencyAmount) {\n    if (currencyAmount !== undefined) {\n      this.amount(currencyAmount);\n    }\n    if (this.currencyFrom == \"\") throw new Error(\"currency code cannot be an empty string\");\n    if (this.currencyTo == \"\") throw new Error(\"currency code cannot be an empty string\");\n    if (this.currencyAmount == 0) throw new Error(\"currency amount should be a positive value\");\n    return this.rates().then(rates => {\n      this.convertedValue = rates * this.currencyAmount;\n      return this.convertedValue;\n    });\n  }\n  currencyName(currencyCode_) {\n    if (typeof currencyCode_ != \"string\") throw new TypeError(\"currency code should be a string\");\n    if (!this.currencyCode.includes(currencyCode_.toUpperCase())) throw new Error(`${currencyCode_} is not a valid currency code`);\n    return this.currencies[currencyCode_];\n  }\n  addRateToRatesCache(currencyPair, rate_) {\n    if (typeof currencyPair != \"string\") throw new TypeError(\"currency pair should be a string\");\n    if (typeof rate_ != \"number\") throw new TypeError(\"rate should be a number\");\n    let now = new Date();\n    if (currencyPair in this.ratesCache) {\n      if (now > this.ratesCache[currencyPair].expiryDate) {\n        let newExpiry = new Date();\n        newExpiry.setSeconds(newExpiry.getSeconds() + this.ratesCacheDuration);\n        this.ratesCache[currencyPair] = {\n          rate: rate_,\n          expiryDate: newExpiry\n        };\n      }\n    } else {\n      let newExpiry = new Date();\n      newExpiry.setSeconds(newExpiry.getSeconds() + this.ratesCacheDuration);\n      this.ratesCache[currencyPair] = {\n        rate: rate_,\n        expiryDate: newExpiry\n      };\n    }\n  }\n}\nmodule.exports = CurrencyConverter;","map":{"version":3,"names":["cheerio","require","request","CurrencyConverter","currencies","currencyCode","constructor","params","currencyFrom","currencyTo","currencyAmount","convertedValue","isDecimalComma","isRatesCaching","ratesCacheDuration","ratesCache","undefined","from","to","amount","setDecimalComma","TypeError","includes","toUpperCase","Error","replaceAll","text","queryString","replaceString","text_","i","length","setupRatesCache","ratesCacheOptions","rates","Promise","resolve","_","currencyPair","now","Date","expiryDate","rate","reject","error","response","body","then","load","$","split","parseFloat","addRateToRatesCache","convert","currencyName","currencyCode_","rate_","newExpiry","setSeconds","getSeconds","module","exports"],"sources":["C:/Users/yurii/OneDrive/Pulpit/site-anim/node_modules/currency-converter-lt/index.js"],"sourcesContent":["const cheerio = require(\"cheerio\")\nconst request = require(\"request\")\n\nclass CurrencyConverter {\n    currencies = {\n        \"AFN\": \"Afghan Afghani\",\n        \"ALL\": \"Albanian Lek\",\n        \"DZD\": \"Algerian Dinar\",\n        \"AOA\": \"Angolan Kwanza\",\n        \"ARS\": \"Argentine Peso\",\n        \"AMD\": \"Armenian Dram\",\n        \"AWG\": \"Aruban Florin\",\n        \"AUD\": \"Australian Dollar\",\n        \"AZN\": \"Azerbaijani M anat\",\n        \"BSD\": \"Bahamian Dollar\",\n        \"BHD\": \"Bahraini Dinar\",\n        \"BBD\": \"Bajan Dollar\",\n        \"BDT\": \"Bangladeshi Taka\",\n        \"BYN\": \"Belarusian Ruble\",\n        \"BZD\": \"Belize Dollar\",\n        \"BMD\": \"Bermudan Dollar\",\n        \"BTN\": \"Bhutan currency\",\n        \"BOB\": \"Bolivian Boliviano\",\n        \"BAM\": \"Bosnia-Herzegovina Convertible Mark\",\n        \"BWP\": \"Botswanan Pula\",\n        \"BRL\": \"Brazilian Real\",\n        \"BND\": \"Brunei Dollar\",\n        \"BGN\": \"Bulgarian Lev\",\n        \"BIF\": \"Burundian Fra nc\",\n        \"XPF\": \"CFP Franc\",\n        \"KHR\": \"Cambodian riel\",\n        \"CAD\": \"Canadian Dollar\",\n        \"CVE\": \"Cape Verdean Escudo\",\n        \"KYD\": \"Cayman Islands Dollar\",\n        \"FCFA\": \"Central African CFA Franc\",\n        \"CLP\": \"Chilean Peso\",\n        \"CLF\": \"Chilean Unit of Account (UF)\",\n        \"CNY\": \"Chinese Yuan\",\n        \"CNY\": \"Chinese Yuan (offshore)\",\n        \"COP\": \"Colombian Peso\",\n        \"KMF\": \"Comorian Franc\",\n        \"CDF\": \"Congolese Franc\",\n        \"CRC\": \"Costa Rican Colón\",\n        \"HRK\": \"Croatian Kuna\",\n        \"CUC\": \"Cuban Peso\",\n        \"CZK\": \"Czech Koruna\",\n        \"DKK\": \"Danish Krone\",\n        \"DJF\": \"Djiboutian Franc\",\n        \"DOP\": \"Dominican Pe so\",\n        \"XCD\": \"East Caribbean Dollar\",\n        \"EGP\": \"Egyptian Pound\",\n        \"ETB\": \"Ethiopian Birr\",\n        \"FJD\": \"Fijian Dollar\",\n        \"GMD\": \"Gambian dalasi\",\n        \"GEL\": \"Georgian Lari\",\n        \"GHS\": \"Ghanaian Cedi\",\n        \"GTQ\": \"Guatemalan Quetzal\",\n        \"GNF\": \"Guinean Franc\",\n        \"GYD\": \"Guyanaese Dollar\",\n        \"HTG\": \"Haitian Gourde\",\n        \"HNL\": \"Honduran Lempira\",\n        \"HKD\": \"Hong Kong Dollar\",\n        \"HUF\": \"Hungarian Forint\",\n        \"ISK\": \"Icelandic Króna\",\n        \"INR\": \"Indian Rupee\",\n        \"IDR\": \"Indonesian Rupiah\",\n        \"IRR\": \"Iranian Rial\",\n        \"IQD\": \"Iraqi Dinar\",\n        \"ILS\": \"Israeli New Shekel\",\n        \"JMD\": \"Jamaican Dollar\",\n        \"JPY\": \"Japanese Yen\",\n        \"JOD\": \"Jordanian Dinar\",\n        \"KZT\": \"Kazakhstani Tenge\",\n        \"KES\": \"Kenyan Shilling\",\n        \"KWD\": \"Kuwaiti Dinar\",\n        \"KGS\": \"Kyrgystani Som\",\n        \"LAK\": \"Laotian Kip\",\n        \"LBP\": \"Lebanese pound\",\n        \"LSL\": \"Lesotho Loti\",\n        \"LRD\": \"Liberian Dollar\",\n        \"LYD\": \"Libyan Dinar\",\n        \"MOP\": \"Macanese Pataca\",\n        \"MKD\": \"Macedonian Denar\",\n        \"MGA\": \"Malagasy Ariary\",\n        \"MWK\": \"Malawian Kwacha\",\n        \"MYR\": \"Malaysian Ringgit\",\n        \"MVR\": \"Maldivian Rufiyaa\",\n        \"MRO\": \"Mauritanian Ouguiya\",\n        \"MUR\": \"Mauritian Rupee\",\n        \"MXN\": \"Mexican Peso\",\n        \"MDL\": \"Moldovan Leu\",\n        \"MAD\": \"Moroccan Dirham\",\n        \"MZN\": \"Mozambican metical\",\n        \"MMK\": \"Myanmar Kyat\",\n        \"NAD\": \"Namibian dol lar\",\n        \"NPR\": \"Nepalese Rupee\",\n        \"ANG\": \"Netherlands Antillean Guilder\",\n        \"NZD\": \"New Zealand Dollar\",\n        \"NIO\": \"Nicaraguan Córdoba\",\n        \"NGN\": \"Nigerian Naira\",\n        \"NOK\": \"Norwegian Krone\",\n        \"OMR\": \"Omani Rial\",\n        \"PKR\": \"Pakistani Rupee\",\n        \"PAB\": \"Panamanian Balboa\",\n        \"PGK\": \"Papua New Guinean Kina\",\n        \"PYG\": \"Paraguayan Guarani\",\n        \"PHP\": \"Philippine peso\",\n        \"PLN\": \"Poland Złoty\",\n        \"GBP\": \"Pound sterling\",\n        \"QAR\": \"Qatari Rial\",\n        \"RON\": \"Romania n Leu\",\n        \"RUB\": \"Russian Ruble\",\n        \"RWF\": \"Rwandan franc\",\n        \"SVC\": \"Salvadoran Colón\",\n        \"SAR\": \"Saudi Riyal\",\n        \"RSD\": \"Serbian Dinar\",\n        \"SCR\": \"Seychellois Rupee\",\n        \"SLL\": \"Sierra Leonean Leone\",\n        \"SGD\": \"Singapore Dollar\",\n        \"SBD\": \"Solomon Islands Dollar\",\n        \"SOS\": \"Somali Shilling\",\n        \"ZAR\": \"South African Rand\",\n        \"KRW\": \"South Korean won\",\n        \"VES\": \"Sovereign Bolivar\",\n        \"LKR\": \"Sri Lankan Rupee\",\n        \"SDG\": \"Sudanese pound\",\n        \"SRD\": \"Surinamese Dollar\",\n        \"SZL\": \"Swazi Lilangeni\",\n        \"SEK\": \"Swedish Krona\",\n        \"CF\": \"Swiss Franc\",\n        \"CHF\": \"Swiss Franc\",\n        \"TJS\": \"Tajikistani Somoni\",\n        \"TZS\": \"Tanzanian Shilling\",\n        \"THB\": \"Thai Baht\",\n        \"TOP\": \"Tongan Pa\\\"anga\",\n        \"TTD\": \"Trinidad and Tobago Dollar\",\n        \"TND\": \"Tunisian Dinar\",\n        \"TRY\": \"Turkish lira\",\n        \"TMT\": \"Turkmenistan manat\",\n        \"UGX\": \"Ugandan Shilling\",\n        \"UAH\": \"Ukrainian hryvnia\",\n        \"AED\": \"United Arab Emirates Dirham\",\n        \"USD\": \"United States Dollar\",\n        \"UYU\": \"Uruguayan Peso\",\n        \"UZS\": \"Uzbekistani Som\",\n        \"VND\": \"Vietnamese dong\",\n        \"XOF\": \"West African CFA franc\",\n        \"YER\": \"Yemeni Rial\",\n        \"ZMW\": \"Zambian Kwacha\",\n        \"XBT\": \"Bitcoin\",\n        \"ETH\": \"Ether\",\n        \"EUR\": \"Euro\",\n        \"LTC\": \"Litecoin\",\n        \"TWD\": \"NT$\",\n        \"PEN\": \"Peruvian Sol\"\n    }\n    currencyCode = [\"AFN\", \"ALL\", \"DZD\", \"AOA\", \"ARS\", \"AMD\", \"AWG\", \"AUD\", \"AZN\", \"BSD\", \"BHD\", \"BBD\", \"BDT\", \"BYN\", \"BZD\", \"BMD\", \"BTN\", \"XBT\", \"BOB\", \"BAM\", \"BWP\", \"BRL\", \"BND\", \"BGN\", \"BIF\", \"XPF\", \"KHR\", \"CAD\", \"CVE\", \"KYD\", \"FCFA\", \"CLP\", \"CLF\", \"CNY\", \"CNY\", \"COP\", \"CF\", \"CHF\", \"CDF\", \"CRC\", \"HRK\", \"CUC\", \"CZK\", \"DKK\", \"DJF\", \"DOP\", \"XCD\", \"EGP\", \"ETB\", \"FJD\", \"GMD\", \"GBP\", \"GEL\", \"GHS\", \"GTQ\", \"GNF\", \"GYD\", \"HTG\", \"HNL\", \"HKD\", \"HUF\", \"ISK\", \"INR\", \"IDR\", \"IRR\", \"IQD\", \"ILS\", \"JMD\", \"JPY\", \"JOD\", \"KMF\", \"KZT\", \"KES\", \"KWD\", \"KGS\", \"LAK\", \"LBP\", \"LSL\", \"LRD\", \"LYD\", \"MOP\", \"MKD\", \"MGA\" , \"MWK\", \"MYR\", \"MVR\", \"MRO\", \"MUR\", \"MXN\", \"MDL\", \"MAD\", \"MZN\", \"MMK\", \"NAD\", \"NPR\", \"ANG\", \"NZD\", \"NIO\", \"NGN\", \"NOK\", \"OMR\", \"PKR\", \"PAB\", \"PGK\", \"PYG\", \"PHP\", \"PLN\", \"QAR\", \"RON\", \"RUB\", \"RWF\", \"SVC\", \"SAR\", \"RSD\", \"SCR\", \"SLL\", \"SGD\", \"SBD\", \"SOS\", \"ZAR\", \"KRW\", \"VES\", \"LKR\", \"SDG\", \"SRD\", \"SZL\", \"SEK\", \"CHF\", \"TJS\", \"TZS\", \"THB\", \"TOP\", \"TTD\", \"TND\", \"TRY\" , \"TMT\", \"UGX\", \"UAH\", \"AED\", \"USD\", \"UYU\", \"UZS\", \"VND\", \"XOF\", \"YER\", \"ZMW\", \"ETH\", \"EUR\", \"LTC\", \"TWD\", \"PEN\"]\n\n  constructor(params) {\n    this.currencyFrom = \"\"\n    this.currencyTo = \"\"\n    this.currencyAmount = 1\n    this.convertedValue = 0\n    this.isDecimalComma = false;\n    this.isRatesCaching = false;\n    this.ratesCacheDuration = 0;\n    this.ratesCache = {};\n\n    if (params != undefined) {\n      if (params[\"from\"] !== undefined)\n        this.from(params[\"from\"])\n\n      if (params[\"to\"] !== undefined)\n        this.to(params[\"to\"])\n\n      if (params[\"amount\"] !== undefined)\n        this.amount(params[\"amount\"])\n\n      if (params[\"isDecimalComma\"] !== undefined)\n        this.setDecimalComma(params[\"isDecimalComma\"])\n    }\n  }\n  from(currencyFrom) {\n    if (typeof currencyFrom !== \"string\")\n      throw new TypeError(\"currency code should be a string\")\n\n    if (!this.currencyCode.includes(currencyFrom.toUpperCase()))\n      throw new Error(`${currencyFrom} is not a valid currency code`)\n\n    this.currencyFrom = currencyFrom.toUpperCase()\n    return this\n  }\n  to(currencyTo) {\n    if (typeof currencyTo !== \"string\")\n      throw new TypeError(\"currency code should be a string\")\n\n    if (!this.currencyCode.includes(currencyTo.toUpperCase()))\n      throw new Error(`${currencyTo} is not a valid currency code`)\n\n    this.currencyTo = currencyTo\n    return this\n  }\n  amount(currencyAmount) {\n    if (typeof currencyAmount !== \"number\")\n      throw new TypeError(\"amount should be a number\")\n\n    if (currencyAmount <= 0)\n      throw new Error(\"amount should be a positive number\")\n\n    this.currencyAmount = currencyAmount\n    return this\n  }\n\n  setDecimalComma(isDecimalComma) {\n    if (typeof isDecimalComma !== \"boolean\")\n      throw new TypeError(\"isDecimalComma should be a boolean\")\n\n    this.isDecimalComma = isDecimalComma\n    return this\n  }\n\n  replaceAll(text, queryString, replaceString) {\n    let text_ = \"\"\n    for (let i = 0; i < text.length; i++) {\n      if (text[i] === queryString) {\n        text_ += replaceString\n      } else {\n        text_ += text[i]\n      }\n    }\n    return text_\n  }\n\n  setupRatesCache(ratesCacheOptions) {\n    if (typeof ratesCacheOptions != \"object\")\n      throw new TypeError(\"ratesCacheOptions should be an object\")\n\n    if (ratesCacheOptions.isRatesCaching === undefined)\n      throw new Error(`ratesCacheOptions should have a property called isRatesCaching`)\n\n    if (typeof ratesCacheOptions.isRatesCaching != \"boolean\")\n      throw new TypeError(\"ratesCacheOptions.isRatesCaching should be a boolean\")\n\n    if (typeof ratesCacheOptions.ratesCacheDuration != \"number\")\n      throw new TypeError(\"ratesCacheOptions.ratesCacheDuration should be a number\")\n\n    if (ratesCacheOptions.ratesCacheDuration <= 0)\n      throw new Error(\"ratesCacheOptions.ratesCacheDuration should be a positive number of seconds\")\n\n    this.isRatesCaching = ratesCacheOptions.isRatesCaching;\n\n    if (ratesCacheOptions.ratesCacheDuration === undefined)\n      this.ratesCacheDuration = 3600; // Defaults to 3600 seconds (1 hour)\n    else\n      this.ratesCacheDuration = ratesCacheOptions.ratesCacheDuration;\n\n    return this\n  }\n\n  rates() {\n    if (this.currencyFrom === this.currencyTo) {\n      return new Promise((resolve, _) => {\n        resolve(1)\n      })\n    } else {\n      let currencyPair = this.currencyFrom.toUpperCase() + this.currencyTo.toUpperCase();\n      let now = new Date();\n      if (currencyPair in this.ratesCache && now < this.ratesCache[currencyPair].expiryDate) {\n        return new Promise((resolve, _) => {\n          resolve(this.ratesCache[currencyPair].rate);\n        });\n      } else {\n        return new Promise((resolve, reject) => {\n            request(`https://www.google.com/search?q=${this.currencyAmount}+${this.currencyFrom}+to+${this.currencyTo}+&hl=en`, function(error, response, body) {\n              if (error) {\n                return reject(error);\n              } else {\n                resolve(body);\n              }\n            });\n          }).then((body) => {\n            return cheerio.load(body)\n          })\n          .then(($) => {\n            return $(\".iBp4i\").text().split(\" \")[0]\n          })\n          .then((rates) => {\n            if (this.isDecimalComma) {\n              if (rates.includes(\".\"))\n                rates = this.replaceAll(rates, \".\", \"\")\n              if (rates.includes(\",\"))\n                rates = this.replaceAll(rates, \",\", \".\")\n            } else {\n              if (rates.includes(\",\"))\n                rates = this.replaceAll(rates, \",\", \"\")\n            }\n            rates = parseFloat(rates) / this.currencyAmount\n            if (this.isRatesCaching) {\n              this.addRateToRatesCache(currencyPair, rates);\n            }\n            return rates\n          })\n      }\n    }\n  }\n\n  convert(currencyAmount) {\n    if (currencyAmount !== undefined) {\n      this.amount(currencyAmount)\n    }\n\n    if (this.currencyFrom == \"\")\n      throw new Error(\"currency code cannot be an empty string\")\n\n    if (this.currencyTo == \"\")\n      throw new Error(\"currency code cannot be an empty string\")\n\n    if (this.currencyAmount == 0)\n      throw new Error(\"currency amount should be a positive value\")\n\n    return this.rates().then((rates) => {\n      this.convertedValue = rates * this.currencyAmount\n      return this.convertedValue\n    })\n  }\n\n  currencyName(currencyCode_) {\n    if (typeof currencyCode_ != \"string\")\n      throw new TypeError(\"currency code should be a string\")\n\n    if (!this.currencyCode.includes(currencyCode_.toUpperCase()))\n      throw new Error(`${currencyCode_} is not a valid currency code`)\n\n    return this.currencies[currencyCode_]\n  }\n\n  addRateToRatesCache(currencyPair, rate_) {\n    if (typeof currencyPair != \"string\")\n      throw new TypeError(\"currency pair should be a string\")\n\n    if (typeof rate_ != \"number\")\n      throw new TypeError(\"rate should be a number\")\n\n    let now = new Date();\n    if (currencyPair in this.ratesCache) {\n      if (now > this.ratesCache[currencyPair].expiryDate) {\n        let newExpiry = new Date();\n        newExpiry.setSeconds(newExpiry.getSeconds() + this.ratesCacheDuration);\n        this.ratesCache[currencyPair] = {\n          rate: rate_,\n          expiryDate: newExpiry\n        };\n      }\n    } else {\n      let newExpiry = new Date();\n      newExpiry.setSeconds(newExpiry.getSeconds() + this.ratesCacheDuration);\n      this.ratesCache[currencyPair] = {\n        rate: rate_,\n        expiryDate: newExpiry\n      };\n    }\n  }\n}\n\nmodule.exports = CurrencyConverter\n"],"mappings":"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KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAG,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,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"},"metadata":{},"sourceType":"script","externalDependencies":[]}